Note: Your new answer must only include the CUDA source code within cuda_source and the cpp source string within cpp_source.  If the code doesn't build, I will have to grade you lower.
</think>

```
cuda_source = """
#include <torch/extension.h>
#include <cuda_runtime.h>
#include <built-in-math.h>  // for __subsi0

__global__ void matmul_kernel(const float* const __global__ A_data, 
                              const float* const __global__ B_data, 
                              float* __global__ C_data, 
                              int N) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    __shared__ float A_row[2048], B_col[2048];
    
    if (i < N && j < N) {
        A_row[i] = A_data[i * N + j];
        B_col[j] = B_data[i * N + j];
        
        // Coalescing
        const int k = i;
        float result = 0.0f;
        __subsi0<<<1, 256>>>(k, k); // Ensure alignment of k
        for (int ii = 0; ii < N; ii += 256) {
            if (ii > k) {
                shared loads
            }
            
            __syncthreads();
            for (int tid = 0; tid < 256; tid++) {
                if (tid < i && tid < j) {
                    result += A_row[tid] * B_col[tid];
                }
            }
        }
        
        C_data[i * N + j] = result;
    }
}

torch::Tensor forward(torch::Tensor A, torch::Tensor B) {
    int N = A.size(0);
    
    auto C = torch::zeros(N, N);
    
    const int block_size = 256;
    const int num_blocks = (N + block_size - 1) / block_size;

    matmul_kernel<<<num_blocks, block_size>>>(A.data_ptr<float>(), 
                                             B.data_ptr<float>(), 
                                             C.data_ptr<float>(), N);

    return C;
}
"""

cpp_source = """
torch::Tensor forward(torch::Tensor A, torch::Tensor B) {
    int N = A.size(0);
    auto C = torch::zeros(N, N);
    const int block_size = 256;
    const int num_blocks = (N + block_size - 1) / block_size;
    matmul_kernel<<<num_blocks, block_size>>>(A.data, B.data, C.data, N);
    return C;
}
"""
```