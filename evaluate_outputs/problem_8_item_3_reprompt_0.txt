

```
cuda_source = """
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ void matmul_kernel(const float* A, const float* B, float* C, int M, int N, int K) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    float Cij = 0;
    for (int k = 0; k < K; ++k) {
        Cij += A[blockRow(i, k) * M + k] * B[blockCol(j, k) * N + k];
    }
    if (i < M && j < N) {
        C[i * N + j] = Cij;
    }
}

torch::Tensor forward(torch::Tensor A, torch::Tensor B) {
    int M = A.size(0);
    int K = A.size(1);
    int N = B.size(1);
    
    auto C = torch::zeros(M, N);

    const int block_size = 256;
    const int num_blocks = (M / block_size + 1) * (N / block_size + 1);

    matmul_kernel<<<num_blocks, block_size>>>(A.data_ptr(), B.data_ptr(), C.data_ptr(), M, N, K);

    return C;
}
"""

cpp_source = """
torch::Tensor forward(torch::Tensor A, torch::Tensor B);
"""
```