

```
cuda_source = """
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ void matmul_kernel(const float* d_A, const float* d_B, float* d_C, int M, int K, int N) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    float C_ij = 0.0f;
    for (int k = 0; k < K; ++k) {
        C_ij += d_A[i * K + k] * d_B[k * N + j];
    }
    d_C[i * N + j] = C_ij;
}

torch::Tensor forward(torch::Tensor A, torch::Tensor B) {
    int num_rows_A = A.size(0);
    int num_cols_A = A.size(1);
    int num_cols_B = B.size(1);

    // Allocate output
    std::vector<int> sizes = {num_rows_A, num_cols_B};
    int size = 1;
    for (int dim : sizes) {
        size *= dim;
    }
    char* d_C = (char*)torch::malloc(size * sizeof(char));
    std::vector<int> C_sizes = {A.numel(), B.numel(), size};
    int num_blocks = (size / 256 + 1) / 256;
    int block_size = 256;
    matmul_kernel<<<num_blocks, block_size>>>(A.data_ptr(), B.data_ptr(), d_C, num_rows_A, num_cols_A, num_cols_B);

    // Convert char* to float* and create output tensor
    std::vector<int> C_sizes_vec = {static_cast<int64_t>(A.numel()), static_cast<int64_t>(B.numel()), static_cast<int64_t>(size)};
    torch::Tensor C = torch::empty tensor[C_sizes];
    return C;
}
"""

cpp_source = """
torch::Tensor forward(torch::Tensor A, torch::Tensor B) {
    int num_rows_A = A.size(0);
    int num_cols_A = A.size(1);
    int num_cols_B = B.size(1);

    // Allocate output
    std::vector<int> sizes = {num_rows_A, num_cols_B};
    int size = 1;
    for (int dim : sizes) {
        size *= dim;
    }
    char* d_C = (char*)torch::malloc(size * sizeof(char));
    std::vector<int> C_sizes = {A.numel(), B.numel(), size};
    int num_blocks = (size / 256 + 1) / 256;
    int block_size = 256;
    matmul_kernel<<<num_blocks, block_size>>>(A.data_ptr(), B.data_ptr(), d_C, num_rows_A, num_cols_A, num_cols_B);

    // Convert char* to float* and create output tensor
    std::vector<int> C_sizes_vec = {static_cast<int64_t>(A.numel()), static_cast<int64_t>(B.numel()), static_cast<int64_t>(size)};
    torch::Tensor C = torch::empty tensor[C_sizes];
    return C;
}
"""